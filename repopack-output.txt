This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-09-10T03:46:44.379Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
assets/
  dot-background.svg
  settings-01.svg
src/
  classes.js
  functions.js
  index.js
  styles.css
index.html
package.json

================================================================
Repository Files
================================================================

================
File: assets/dot-background.svg
================
<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32' width='16' height='16' fill='none'><circle fill='rgb(0 0 0 / 0.2)' id='pattern-circle' cx='10' cy='10' r='1.6257413380501518'></circle></svg>

================
File: assets/settings-01.svg
================
<svg
  xmlns="http://www.w3.org/2000/svg"
  width="24"
  height="24"
  viewBox="0 0 24 24"
  fill="none"
>
  <path
    opacity="0.28"
    d="M14.1026 4.417L13.7992 4.11982L13.7992 4.11981C13.1682 3.50174 12.8527 3.1927 12.4903 3.07661C12.1714 2.97446 11.8286 2.97446 11.5097 3.07661C11.1473 3.1927 10.8318 3.50174 10.2008 4.11981L10.2008 4.11982L9.89735 4.417L9.89735 4.41701C9.62451 4.68424 9.48809 4.81786 9.32984 4.91393C9.18951 4.99913 9.03695 5.06232 8.87749 5.1013C8.69764 5.14527 8.5067 5.14725 8.12481 5.15122H8.12481L7.70012 5.15562C6.81685 5.16479 6.37522 5.16937 6.03688 5.34354C5.73918 5.49678 5.49678 5.73918 5.34354 6.03688C5.16937 6.37522 5.16479 6.81685 5.15562 7.70012L5.15122 8.12481V8.12481C5.14725 8.5067 5.14527 8.69764 5.1013 8.87749C5.06232 9.03695 4.99913 9.18951 4.91393 9.32984C4.81786 9.48809 4.68424 9.62451 4.41701 9.89735L4.417 9.89735L4.11982 10.2008L4.11981 10.2008C3.50173 10.8318 3.1927 11.1473 3.07661 11.5097C2.97446 11.8286 2.97446 12.1714 3.07661 12.4903C3.1927 12.8527 3.50174 13.1682 4.11981 13.7992L4.11982 13.7992L4.417 14.1026C4.68424 14.3755 4.81786 14.5119 4.91393 14.6702C4.99913 14.8105 5.06232 14.963 5.1013 15.1225C5.14527 15.3024 5.14725 15.4933 5.15122 15.8752L5.15562 16.2999C5.16479 17.1831 5.16937 17.6248 5.34354 17.9631C5.49678 18.2608 5.73918 18.5032 6.03688 18.6565C6.37522 18.8306 6.81685 18.8352 7.70012 18.8444L8.12481 18.8488C8.5067 18.8527 8.69764 18.8547 8.87749 18.8987C9.03695 18.9377 9.18951 19.0009 9.32984 19.0861C9.48809 19.1821 9.62451 19.3158 9.89735 19.583L10.2008 19.8802L10.2008 19.8802C10.8318 20.4983 11.1473 20.8073 11.5097 20.9234C11.8286 21.0255 12.1714 21.0255 12.4903 20.9234C12.8527 20.8073 13.1682 20.4983 13.7992 19.8802L13.7992 19.8802L14.1026 19.583C14.3755 19.3158 14.5119 19.1821 14.6702 19.0861C14.8105 19.0009 14.963 18.9377 15.1225 18.8987C15.3024 18.8547 15.4933 18.8527 15.8752 18.8488L16.2999 18.8444C17.1831 18.8352 17.6248 18.8306 17.9631 18.6565C18.2608 18.5032 18.5032 18.2608 18.6565 17.9631C18.8306 17.6248 18.8352 17.1831 18.8444 16.2999L18.8488 15.8752C18.8527 15.4933 18.8547 15.3024 18.8987 15.1225C18.9377 14.963 19.0009 14.8105 19.0861 14.6702C19.1821 14.5119 19.3158 14.3755 19.583 14.1026L19.8802 13.7992L19.8802 13.7992C20.4983 13.1682 20.8073 12.8527 20.9234 12.4903C21.0255 12.1714 21.0255 11.8286 20.9234 11.5097C20.8073 11.1473 20.4983 10.8318 19.8802 10.2008L19.8802 10.2008L19.583 9.89735C19.3158 9.62451 19.1821 9.48809 19.0861 9.32984C19.0009 9.18951 18.9377 9.03695 18.8987 8.87749C18.8547 8.69764 18.8527 8.5067 18.8488 8.12481L18.8444 7.70012C18.8352 6.81685 18.8306 6.37522 18.6565 6.03688C18.5032 5.73918 18.2608 5.49678 17.9631 5.34354C17.6248 5.16937 17.1831 5.16479 16.2999 5.15562L15.8752 5.15122C15.4933 5.14725 15.3024 5.14527 15.1225 5.1013C14.963 5.06232 14.8105 4.99913 14.6702 4.91393C14.5119 4.81786 14.3755 4.68424 14.1026 4.417Z"
    fill="currentcolor"
  />
  <path
    d="M10.2007 4.11982C10.8318 3.50174 11.1473 3.1927 11.5097 3.07661C11.8285 2.97446 12.1713 2.97446 12.4902 3.07661C12.8526 3.1927 13.1681 3.50174 13.7992 4.11982L14.1026 4.417C14.3754 4.68424 14.5118 4.81786 14.6701 4.91393C14.8104 4.99913 14.963 5.06232 15.1225 5.1013C15.3023 5.14527 15.4932 5.14725 15.8751 5.15122L16.2998 5.15562C17.1831 5.16479 17.6247 5.16937 17.9631 5.34354C18.2608 5.49678 18.5032 5.73918 18.6564 6.03688C18.8306 6.37522 18.8351 6.81685 18.8443 7.70012L18.8487 8.12481C18.8527 8.5067 18.8547 8.69764 18.8986 8.87749C18.9376 9.03695 19.0008 9.18951 19.086 9.32984C19.1821 9.48809 19.3157 9.62451 19.5829 9.89735L19.8801 10.2008C20.4982 10.8318 20.8072 11.1473 20.9233 11.5097C21.0255 11.8286 21.0255 12.1714 20.9233 12.4903C20.8072 12.8527 20.4982 13.1682 19.8801 13.7992L19.5829 14.1026C19.3157 14.3755 19.1821 14.5119 19.086 14.6702C19.0008 14.8105 18.9376 14.963 18.8986 15.1225C18.8547 15.3024 18.8527 15.4933 18.8487 15.8752L18.8443 16.2999C18.8351 17.1831 18.8306 17.6248 18.6564 17.9631C18.5032 18.2608 18.2608 18.5032 17.9631 18.6565C17.6247 18.8306 17.1831 18.8352 16.2998 18.8444L15.8751 18.8488C15.4932 18.8527 15.3023 18.8547 15.1225 18.8987C14.963 18.9377 14.8104 19.0009 14.6701 19.0861C14.5118 19.1821 14.3754 19.3158 14.1026 19.583L13.7992 19.8802C13.1681 20.4983 12.8526 20.8073 12.4902 20.9234C12.1713 21.0255 11.8285 21.0255 11.5097 20.9234C11.1473 20.8073 10.8318 20.4983 10.2007 19.8802L9.89729 19.583C9.62445 19.3158 9.48803 19.1821 9.32978 19.0861C9.18945 19.0009 9.03689 18.9377 8.87742 18.8987C8.69758 18.8547 8.50664 18.8527 8.12475 18.8488L7.70006 18.8444C6.81679 18.8352 6.37516 18.8306 6.03682 18.6565C5.73912 18.5032 5.49672 18.2608 5.34348 17.9631C5.16931 17.6248 5.16473 17.1831 5.15556 16.2999L5.15115 15.8752C5.14719 15.4933 5.14521 15.3024 5.10124 15.1225C5.06226 14.963 4.99907 14.8105 4.91387 14.6702C4.81779 14.5119 4.68418 14.3755 4.41694 14.1026L4.11976 13.7992C3.50168 13.1682 3.19264 12.8527 3.07655 12.4903C2.9744 12.1714 2.9744 11.8286 3.07655 11.5097C3.19264 11.1473 3.50168 10.8318 4.11976 10.2008L4.41694 9.89735C4.68418 9.62451 4.81779 9.48809 4.91387 9.32984C4.99907 9.18951 5.06226 9.03695 5.10124 8.87749C5.14521 8.69764 5.14719 8.5067 5.15115 8.12481L5.15556 7.70012C5.16473 6.81685 5.16931 6.37522 5.34348 6.03688C5.49672 5.73918 5.73912 5.49678 6.03682 5.34354C6.37516 5.16937 6.81679 5.16479 7.70006 5.15562L8.12475 5.15122C8.50664 5.14725 8.69758 5.14527 8.87742 5.1013C9.03689 5.06232 9.18945 4.99913 9.32978 4.91393C9.48803 4.81786 9.62445 4.68424 9.89729 4.417L10.2007 4.11982Z"
    stroke="currentcolor"
    stroke-width="2"
    stroke-linecap="round"
    stroke-linejoin="round"
  />
  <path
    d="M10.991 12C10.991 11.4477 11.4479 11 12.0001 11C12.5524 11 13.0093 11.4477 13.0093 12C13.0093 12.5523 12.5524 13 12.0001 13C11.4479 13 10.991 12.5523 10.991 12Z"
    stroke="currentcolor"
    stroke-width="2"
    stroke-linecap="round"
    stroke-linejoin="round"
  />
</svg>

================
File: src/classes.js
================
import { Graphics } from 'pixi.js';


export class Constants {
	constructor() {
		this.DAMPING = .03;
		this.DRAG = .995;
		this.GRAVITY = 980;
		this.FIXED_TIME_STEP = 1/60;
	}
}

export class Globals {
	constructor() {
		this.vertex_holder = [];
		this.line_holder = new Set();
		this.particle_holder = [];
        this.all_lines_graphics = new Graphics();
        this.particle_container;
        this.render_offset_x = 100;
        this.render_offset_y = 100;
        this.render_scale = 1

        this.cut_mode = false;
        this.drag_mode = false;
        this.still_dragging = false;
        this.chosen_dragging_vertex = null;
        this.line_length;
        this.mouse_position = {x:0, y:0};

        this.tearing = true;
        this.tearing_ratio = 10;

        this.is_blocking_canvas = true;
        this.grav_modifier = 1;


        this.columns = 120;
        this.rows = 30;
        this.pins = 7;
	}
}

export class Elements {
	constructor() {
        this.cloth_sim_holder = document.getElementById("cloth-sim-holder");
        this.settings_overlay = document.getElementById("settings-overlay");
        this.settings_close_button = document.getElementById("settings-close-button");
        this.settings_open_button = document.getElementById("settings-open-button");
        this.tearing_checkbox = document.getElementById("tearing-checkbox");
        this.tearing_input = document.getElementById("tearing-input");
        this.columns_input = document.getElementById("columns-input");
        this.rows_input = document.getElementById("rows-input");
        this.pins_input = document.getElementById("pins-input");
        this.build_button = document.getElementById("build-button");
	}
}

================
File: src/functions.js
================
import { Container, Graphics, Sprite } from "pixi.js";


export function draw_lines(globals) {
    globals.all_lines_graphics.clear();
    globals.all_lines_graphics.beginPath();

    for (let line of globals.line_holder) {
        const vertice_1 = globals.vertex_holder[line.point_index_1];
        const vertice_2 = globals.vertex_holder[line.point_index_2];

        globals.all_lines_graphics.moveTo(vertice_1.x*globals.render_scale +globals.render_offset_x, vertice_1.y*globals.render_scale +globals.render_offset_y);
        globals.all_lines_graphics.lineTo(vertice_2.x*globals.render_scale +globals.render_offset_x, vertice_2.y*globals.render_scale +globals.render_offset_y);
    }
    globals.all_lines_graphics.stroke();
}

export function hide_element(element) {
    element.classList.add('hidden');
}

export function show_element(element) {
    element.classList.remove('hidden');
}

export function createCircleTexture(app, radius) {
    const graphics = new Graphics();
    graphics.circle(0, 0, radius);
    graphics.fill(0x000000);
    return app.renderer.generateTexture(graphics);
}

export function set_render_offsets_and_scale(globals) {
    console.log("window.innerWidth:",window.innerWidth)

    //I want to just scale for horizontal
    globals.render_offset_y = 100

    if ( window.innerWidth < 1040 ) {
        globals.render_offset_x = 20
        globals.render_scale = (window.innerWidth - 40)/1000
    } else {
        globals.render_scale = 1
        globals.render_offset_x = Math.floor((window.innerWidth-1000)/2)
    }
    
}

function ccw(A,B,C) {
    return (C.y-A.y) * (B.x-A.x) > (B.y-A.y) * (C.x-A.x);
}

// Return true if line segments AB and CD intersect
export function intersect(A,B,C,D) {
    return ccw(A,C,D) != ccw(B,C,D) && ccw(A,B,C) != ccw(A,B,D)
}


export function update_drawn_particles(globals) {
    for (let i = 0; i < globals.vertex_holder.length; i++) {
        let vertex = globals.vertex_holder[i];
        let particle = globals.particle_holder[i];
        particle.position.set(vertex.x*globals.render_scale +globals.render_offset_x, vertex.y*globals.render_scale +globals.render_offset_y);
    }
}

export function updatePhysics(globals, constants, dt) {
    // Update positions
    for (let vertex of globals.vertex_holder) {
        if (!vertex.fixed && !vertex.grabbed) {
            const vx = (vertex.x - vertex.prev_x) * constants.DRAG;
            const vy = (vertex.y - vertex.prev_y) * constants.DRAG + constants.GRAVITY * globals.grav_modifier * dt * dt;

            vertex.prev_x = vertex.x;
            vertex.prev_y = vertex.y;
            vertex.x += vx;
            vertex.y += vy;
        } else if (vertex.grabbed) {
            vertex.x = (globals.mouse_position.x-globals.render_offset_x)/globals.render_scale;
            vertex.y = (globals.mouse_position.y-globals.render_offset_y)/globals.render_scale;

        }
    }

    // Solve constraints
    for (let f = 0; f < 8; f++) {

        //console.log("globals.line_holder:", globals.line_holder)
        for (let line of globals.line_holder) {
            const vertice_1 = globals.vertex_holder[line.point_index_1];
            const vertice_2 = globals.vertex_holder[line.point_index_2];

            const distance_x = vertice_2.x - vertice_1.x;
            const distance_y = vertice_2.y - vertice_1.y;
            const distance = Math.sqrt(distance_x**2 + distance_y**2);
            const difference = (line.length - distance) / distance;
            if (globals.tearing && distance/line.length > globals.tearing_ratio) {
                globals.line_holder.delete(line);
            }

            const correction_x = distance_x * difference * 0.5;
            const correction_y = distance_y * difference * 0.5;

            if (!vertice_1.fixed && !vertice_1.grabbed) {
                vertice_1.x -= correction_x * (1 - constants.DAMPING);
                vertice_1.y -= correction_y * (1 - constants.DAMPING);
            }
            if (!vertice_2.fixed && !vertice_2.grabbed) {
                vertice_2.x += correction_x * (1 - constants.DAMPING);
                vertice_2.y += correction_y * (1 - constants.DAMPING);
            }
        }
    }

    if (globals.is_blocking_canvas == false && globals.cut_mode) {
        var chosen_line = null;
        for (let line of globals.line_holder) {

            const vertice_1 = globals.vertex_holder[line.point_index_1];
            const vertice_2 = globals.vertex_holder[line.point_index_2];

            const adjusted_mouse_position = {x:(globals.mouse_position.x-globals.render_offset_x)/globals.render_scale, y: (globals.mouse_position.y-globals.render_offset_y)/globals.render_scale}
            const mouse_bottom_point = {x: adjusted_mouse_position.x, y: adjusted_mouse_position.y+10}
            const mouse_right_point = {x: adjusted_mouse_position.x+10, y: adjusted_mouse_position.y}

            const does_intersect = intersect(adjusted_mouse_position,mouse_bottom_point,vertice_1,vertice_2) || intersect(adjusted_mouse_position,mouse_right_point,vertice_1,vertice_2);

            if (does_intersect) {
                chosen_line = line;
                break
            }
        }
        if (chosen_line != null) {
            globals.line_holder.delete(chosen_line)
        }
    }

    if (globals.is_blocking_canvas == false && globals.drag_mode) {
        if (globals.still_dragging == false) {
            var shortest_distance = 9999999999999;
            globals.chosen_dragging_vertex = null;
            for (let vertex of globals.vertex_holder) {
                const distance_to_mouse_x = ((globals.mouse_position.x-globals.render_offset_x)/globals.render_scale) - vertex.x;
                const distance_to_mouse_y = ((globals.mouse_position.y-globals.render_offset_y)/globals.render_scale) - vertex.y;
                const distance_to_mouse_squared = distance_to_mouse_x**2+distance_to_mouse_y**2
                if (distance_to_mouse_squared < shortest_distance) {
                    shortest_distance = distance_to_mouse_squared
                    globals.chosen_dragging_vertex = vertex
                }
                vertex.grabbed = false;
            }
            if (shortest_distance < ((globals.line_length/2)*globals.render_scale)**2) {
                globals.chosen_dragging_vertex.grabbed = true;
                globals.still_dragging = true;
            }
        }
    }
}


export function setup(globals, app, width, height, pin_number) {

    if (globals.all_lines_graphics != undefined) {
        globals.all_lines_graphics.destroy();
    }
    if (globals.particle_container != undefined) {
        globals.particle_container.destroy();
    }

    globals.vertex_holder = [];
    globals.line_holder = new Set();
    globals.particle_holder = [];
    globals.all_lines_graphics = new Graphics();

	globals.line_length = 1000/width
    
    globals.all_lines_graphics.setStrokeStyle({ color: 0x000000, width: Math.max(parseInt(globals.line_length/8), 1)  });
    app.stage.addChild(globals.all_lines_graphics);
    

    globals.particle_container = new Container(width * height, {
        position: true,
        rotation: false,
        uvs: false,
        tint: true
    });

    app.stage.addChild(globals.particle_container);

	var circle_graphic_radius = Math.max(parseInt(globals.line_length/6), 2) 
    var circleTexture = createCircleTexture(app, circle_graphic_radius);

	for (let i = 0; i < (width*height); i++) {
		
		let x = ((i%width)*globals.line_length);
		let y = (Math.floor(i/width)*globals.line_length);

        const particle = new Sprite(circleTexture);
        particle.anchor.set(0.5);
        particle.position.set(x, y);
        globals.particle_container.addChild(particle);

        globals.particle_holder.push(particle);

		var vertex = {
			x : x,
			y : y,
			prev_x : x,
			prev_y : y,
			fixed : false,
			grabbed : false,
		}
		globals.vertex_holder.push(vertex);
	}

    var total_row_lines = (width-1)*height;
	for (let i = 0; i < total_row_lines; i++) {
		let x_coord = (i%(width-1));
		let y_coord = Math.floor(i/(width-1));
		let left_vertex_index = x_coord+(width*y_coord);
		let right_vertex_index = left_vertex_index+1;

		var line = {
			point_index_1 : left_vertex_index,
			point_index_2 : right_vertex_index,
			length : globals.line_length,
		}
		
		globals.line_holder.add(line);
	}

    var total_column_lines = (height-1)*width;
	for (let i = 0; i < total_column_lines; i++) {
		let x_coord = i%width;
		let y_coord = Math.floor(i/width);
		let top_vertex_index = x_coord+(width*y_coord);
		let bottom_vertex_index = top_vertex_index+width;

		var line = {
			point_index_1 : top_vertex_index,
			point_index_2 : bottom_vertex_index,
			length : globals.line_length,
		}
		
		globals.line_holder.add(line);
	}

	for (let i = 0; i < pin_number-1; i++) {
		let pin_index = Math.floor(i*width/(pin_number-1))
		globals.vertex_holder[pin_index].fixed = true;
	}
	globals.vertex_holder[width-1].fixed = true;

    set_render_offsets_and_scale(globals);
}

export function set_up_event_listeners (globals, elements, app) {

    elements.settings_close_button.onclick = function() { hide_element(elements.settings_overlay) };
    elements.settings_open_button.onclick = function() { show_element(elements.settings_overlay) };
    
    elements.settings_open_button.onclick = function() { show_element(elements.settings_overlay) };


    app.canvas.addEventListener('contextmenu', event => event.preventDefault());

    document.addEventListener("mousedown", (event) => {
        if (event.button == 0) {
            globals.drag_mode = true;
            globals.still_dragging = false;
        } else if (event.button == 1) {
            globals.grav_modifier = 10;
        } else if (event.button == 2) {
            if (globals.is_blocking_canvas == false) {
                globals.cut_mode = true;
            }
        }
    });


    document.addEventListener("resize", (event) => {
        set_render_offsets_and_scale(globals)
    });

    document.addEventListener("mousemove", (event) => {
        globals.mouse_position = {x:event.clientX, y:event.clientY}

        globals.is_blocking_canvas = true;
        let element_mouse_is_over = document.elementFromPoint(event.clientX, event.clientY);
        if (element_mouse_is_over != null) {
            if (element_mouse_is_over.nodeName === "CANVAS" && element_mouse_is_over.parentElement.id == "cloth-sim-holder") {
                globals.is_blocking_canvas = false;
            }
        }
    });

    document.addEventListener("mouseup", (event) => {
        if (event.button == 0) {
            globals.drag_mode = false
            globals.still_dragging = false;
            if (globals.chosen_dragging_vertex != null) {
                globals.chosen_dragging_vertex.grabbed = false;
            }
        } else if (event.button == 1) {
            globals.grav_modifier = 1;
        } else if (event.button == 2) {
            globals.cut_mode = false;
        }
    });

    elements.tearing_checkbox.addEventListener('change', function() {
        if (this.checked) {
            globals.tearing = true;
        } else {
            globals.tearing = false;
        }
    });

    elements.tearing_input.value = globals.tearing_ratio;
    elements.tearing_input.addEventListener('change', function() {
        globals.tearing_ratio = this.value;
    });


    elements.columns_input.value = globals.columns;
    elements.columns_input.addEventListener('change', function() {
        globals.columns = this.value;
        console.log("Hi;", globals.columns)
    });
    elements.rows_input.value = globals.rows;
    elements.rows_input.addEventListener('change', function() {
        globals.rows = this.value;
    });

    elements.pins_input.value = globals.pins;
    elements.pins_input.addEventListener('change', function() {
        globals.pins = this.value;
    });

    elements.build_button.onclick = function() { console.log("globals.columns:", globals.columns); setup(globals, app, globals.columns, globals.rows, globals.pins); };



}

================
File: src/index.js
================
import { Application, Container, Graphics, Sprite, autoDetectRenderer } from 'pixi.js';
import { Constants, Elements, Globals } from './classes.js'
import { draw_lines, hide_element, show_element, update_drawn_particles, updatePhysics, setup, set_up_event_listeners,  } from './functions.js'

const constants = new Constants();
const globals = new Globals();
const elements = new Elements();

// Create a PixiJS application.
const app = new Application();

// Intialize the application.
await app.init({
    backgroundAlpha: 0,
    resizeTo: window,
    antialias: true,
});

elements.cloth_sim_holder.appendChild(app.canvas);
set_up_event_listeners(globals, elements, app);

let accumulator = 0;

// Asynchronous IIFE
(async () =>
{
    javascript:(function(){var script=document.createElement('script');script.onload=function(){var stats=new Stats();document.body.appendChild(stats.dom);requestAnimationFrame(function loop(){stats.update();requestAnimationFrame(loop)});};script.src='https://mrdoob.github.io/stats.js/build/stats.min.js';document.head.appendChild(script);})()

    var running_setup = true;

    app.ticker.add((time) =>
    {
        if (running_setup) {
            setup(globals, app, globals.columns, globals.rows, globals.pins);
            running_setup = false
        } else {
            accumulator += time.deltaTime / 60; // Convert to seconds

            // Perform fixed time step updates
            while (accumulator >= constants.FIXED_TIME_STEP) {
                updatePhysics(globals, constants, constants.FIXED_TIME_STEP);
                accumulator -= constants.FIXED_TIME_STEP;
            }

            update_drawn_particles(globals);
            draw_lines(globals);

            
        }
    });
})();

================
File: src/styles.css
================
/*body {
    display: flex;
    flex-direction: row;
    font-family: testfont;
}


#main-view {
    width: 100%;
    height: 100%;
}

body {
    font-family: Arial, Helvetica, sans-serif;
}

*/

body {
    background: url('assets/dot-background.svg');
    overflow: clip;
    margin: 0;
    background-color: #fafafa;
    background-color: #fdfdfd;
    -webkit-user-select: none; /* Safari */
    -ms-user-select: none; /* IE 10 and IE 11 */
    user-select: none; /* Standard syntax */
}

@font-face {
    font-family: custom-heavy;
    src: url(assets/fonts/shin-go/AOTFShinGoProBold.otf);
    /*
    src: url(assets/fonts/FOT-YurukaStd-UB.otf);
    */
}

@font-face {
    font-family: custom-normal;
    src: url(assets/fonts/shin-go/AOTFShinGoProMedium.otf);
}

#menu-holder {
    position: absolute;
    z-index: 10;
    width: 300px;
    height: 350px;
    /*
    */
    right: 0px;
    top: 0px;
    display: flex;
    justify-content: flex-start;
    flex-direction: column;
    align-content: center;
    align-items: center;
    /*
    font-family: testfont;
    */
    font-family: custom-normal;
    font-size: 14px;

    /*
    */
}

.title-holder {
    font-family: custom-heavy;
    font-weight: bold;
    font-size: 14px;

}

.setting-row-holder {
    /*
    gap: 10px;
    border-bottom: 1px dashed;
    */
    display: flex;
    flex-direction: row;
    align-content: center;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    padding: 5px 20px;
    flex-wrap: wrap;

    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
}
.setting-row-holder>* {
    flex: 1 1 20px;
}

#custom-fps-holder {
    position: absolute;
    z-index: 10;
    background-color: red;
    width: 100px;
    height: 100px;
    top: 100px;
    left: 100px;
}

.svg-holder {
    color: black;
    height: 26px;
    width: 26px;
    position: absolute;
    top: 8px;
    right: 8px;
    padding: 4px;
    border-radius: 8px;
}

.svg-holder:hover {
    background-color: rgba(0, 0, 0, 0.05);
    box-shadow: inset 0 0 0 1px rgba(0, 0, 0, .1);
}

#settings-overlay {
    width: 100%;
    height: 100%;
    background-color: rgba(255, 255, 255, .9);
    position: absolute;
    z-index: 100;
    /*

    backdrop-filter: blur(10rem);
    */
    display: flex;
    flex-direction: column;
    align-content: center;
    justify-content: center;
    align-items: center;

}

.card-material {
    background-color: #e5e7eb;
    backdrop-filter: blur(10rem);
    background: rgba(229, 231, 235, 0.1);
    background: rgba(116, 157, 199, 0.1);
    background: rgba(229, 231, 235, 0.2);
    border: 1px solid rgba(255, 255, 255, 0.1);

    border-radius: 10px;
    box-shadow: inset 0 0 0 1px rgba(0, 0, 0, .1);

    border: 1px solid rgba(0, 0, 0, 0.1);
    box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1);
}

.settings-holder {
    width: 400px;
    height: 400px;
    position: relative;
    display: flex;
    justify-content: flex-start;
    flex-direction: column;
    align-content: center;
    align-items: center;
    font-family: custom-normal;
}

.hidden {

    display: none !important;
}

.show-flex {

    display: flex !important;
}

================
File: index.html
================
<!DOCTYPE html>
<html lang="en">
<head>
  <title>Document</title>
  <style type="text/css">
    @import url(src/styles.css);
  </style>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <!--
  -->
    

  <script type="module" src="src/index.js"></script>

  <meta name="viewport" content="initial-scale=0.75">

</head>
<body>
  <!--
    
  
  <div id="custom-fps-holder">

  </div>
  -->

  <div id="settings-overlay" class="hidden">
    <div class="settings-holder card-material">

      <div id="settings-close-button" class="svg-holder">
        <svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 24 24"
  fill="none"
>
  <path
    d="M9 15L12 12M12 12L15 9M12 12L9 9M12 12L15 15M11.9999 21.1499C6.94645 21.1499 2.84985 17.0533 2.84985 11.9999C2.84985 6.94645 6.94645 2.84985 11.9999 2.84985C17.0533 2.84985 21.1499 6.94645 21.1499 11.9999C21.1499 17.0533 17.0533 21.1499 11.9999 21.1499Z"
    stroke="currentcolor"
    stroke-width="1.4"
    stroke-linecap="round"
    stroke-linejoin="round"
  />
</svg>
      </div>

      <div class="title-holder">
        <h1>Settings</h1>
      </div>

      <div class="setting-row-holder">
        <label for="cut-button-selection-dropdown">Cut button</label><br>
        <div class="setting-row-input-holder"> 
          <select name="cut-button-selection-dropdown" id="cut-button-selection-dropdown" style="width: 100%;">
            <option value="middle-click">Middle click</option>
            <option value="left-click">Left click</option>
            <option value="right-click">Right click</option>
          </select>
        </div>
      </div>
  
      <div class="setting-row-holder">
        <label for="drag-button-selection-dropdown">Drag button</label><br>
        <div class="setting-row-input-holder"> 
          <select name="drag-button-selection-dropdown" id="drag-button-selection-dropdown" style="width: 100%;">
            <option value="middle-click">Middle click</option>
            <option value="left-click">Left click</option>
            <option value="right-click">Right click</option>
          </select>
        </div>
      </div>
  
      <div class="setting-row-holder">
        <label for="grav-button-selection-dropdown">High Grav button</label><br>
        <div class="setting-row-input-holder"> 
          <select name="grav-button-selection-dropdown" id="grav-button-selection-dropdown" style="width: 100%;">
            <option value="middle-click">Middle click</option>
            <option value="left-click">Left click</option>
            <option value="right-click">Right click</option>
          </select>
        </div>
      </div>

      <div class="setting-row-holder">
        <label for="show-fps-checkbox">Display FPS</label><br>
        <div class="setting-row-input-holder">
          <input type="checkbox" id="show-fps-checkbox" name="show-fps-checkbox" value="false">
        </div>
      </div>

      <div class="setting-row-holder">
        <label for="smaller-lines-checkbox">Smaller lines</label><br>
        <div class="setting-row-input-holder">
          <input type="checkbox" id="smaller-lines-checkbox" name="smaller-lines-checkbox" value="false">
        </div>
      </div>



    </div>

  </div>
  
  <div id="menu-holder" class="card-material">
    <!---->
    <div id= "settings-open-button" class="svg-holder">
      <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      fill="none"
    >
      <path
        d="M10.2007 4.11982C10.8318 3.50174 11.1473 3.1927 11.5097 3.07661C11.8285 2.97446 12.1713 2.97446 12.4902 3.07661C12.8526 3.1927 13.1681 3.50174 13.7992 4.11982L14.1026 4.417C14.3754 4.68424 14.5118 4.81786 14.6701 4.91393C14.8104 4.99913 14.963 5.06232 15.1225 5.1013C15.3023 5.14527 15.4932 5.14725 15.8751 5.15122L16.2998 5.15562C17.1831 5.16479 17.6247 5.16937 17.9631 5.34354C18.2608 5.49678 18.5032 5.73918 18.6564 6.03688C18.8306 6.37522 18.8351 6.81685 18.8443 7.70012L18.8487 8.12481C18.8527 8.5067 18.8547 8.69764 18.8986 8.87749C18.9376 9.03695 19.0008 9.18951 19.086 9.32984C19.1821 9.48809 19.3157 9.62451 19.5829 9.89735L19.8801 10.2008C20.4982 10.8318 20.8072 11.1473 20.9233 11.5097C21.0255 11.8286 21.0255 12.1714 20.9233 12.4903C20.8072 12.8527 20.4982 13.1682 19.8801 13.7992L19.5829 14.1026C19.3157 14.3755 19.1821 14.5119 19.086 14.6702C19.0008 14.8105 18.9376 14.963 18.8986 15.1225C18.8547 15.3024 18.8527 15.4933 18.8487 15.8752L18.8443 16.2999C18.8351 17.1831 18.8306 17.6248 18.6564 17.9631C18.5032 18.2608 18.2608 18.5032 17.9631 18.6565C17.6247 18.8306 17.1831 18.8352 16.2998 18.8444L15.8751 18.8488C15.4932 18.8527 15.3023 18.8547 15.1225 18.8987C14.963 18.9377 14.8104 19.0009 14.6701 19.0861C14.5118 19.1821 14.3754 19.3158 14.1026 19.583L13.7992 19.8802C13.1681 20.4983 12.8526 20.8073 12.4902 20.9234C12.1713 21.0255 11.8285 21.0255 11.5097 20.9234C11.1473 20.8073 10.8318 20.4983 10.2007 19.8802L9.89729 19.583C9.62445 19.3158 9.48803 19.1821 9.32978 19.0861C9.18945 19.0009 9.03689 18.9377 8.87742 18.8987C8.69758 18.8547 8.50664 18.8527 8.12475 18.8488L7.70006 18.8444C6.81679 18.8352 6.37516 18.8306 6.03682 18.6565C5.73912 18.5032 5.49672 18.2608 5.34348 17.9631C5.16931 17.6248 5.16473 17.1831 5.15556 16.2999L5.15115 15.8752C5.14719 15.4933 5.14521 15.3024 5.10124 15.1225C5.06226 14.963 4.99907 14.8105 4.91387 14.6702C4.81779 14.5119 4.68418 14.3755 4.41694 14.1026L4.11976 13.7992C3.50168 13.1682 3.19264 12.8527 3.07655 12.4903C2.9744 12.1714 2.9744 11.8286 3.07655 11.5097C3.19264 11.1473 3.50168 10.8318 4.11976 10.2008L4.41694 9.89735C4.68418 9.62451 4.81779 9.48809 4.91387 9.32984C4.99907 9.18951 5.06226 9.03695 5.10124 8.87749C5.14521 8.69764 5.14719 8.5067 5.15115 8.12481L5.15556 7.70012C5.16473 6.81685 5.16931 6.37522 5.34348 6.03688C5.49672 5.73918 5.73912 5.49678 6.03682 5.34354C6.37516 5.16937 6.81679 5.16479 7.70006 5.15562L8.12475 5.15122C8.50664 5.14725 8.69758 5.14527 8.87742 5.1013C9.03689 5.06232 9.18945 4.99913 9.32978 4.91393C9.48803 4.81786 9.62445 4.68424 9.89729 4.417L10.2007 4.11982Z"
        stroke="currentcolor"
        stroke-width="1.4"
        stroke-linecap="round"
        stroke-linejoin="round"
      />
      <path
        d="M10.991 12C10.991 11.4477 11.4479 11 12.0001 11C12.5524 11 13.0093 11.4477 13.0093 12C13.0093 12.5523 12.5524 13 12.0001 13C11.4479 13 10.991 12.5523 10.991 12Z"
        stroke="currentcolor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
      />
    </svg>
    </div>

    <div class="title-holder">
      <h1>Menu</h1>
    </div>

    <div class="setting-row-holder">
      <label for="rows-input">Columns</label><br>
      <div class="columns-row-input-holder">
        <input type="number" id="columns-input" name="columns-input" min="1" max="400" style="width: calc(100% - 8px);"/>
      </div>
    </div>

    <div class="setting-row-holder">
      <label for="rows-input">Rows</label><br>
      <div class="setting-row-input-holder">
        <input type="number" id="rows-input" name="rows-input" min="1" max="400" style="width: calc(100% - 8px);"/>
      </div>
    </div>

    <div class="setting-row-holder">
      <label for="pins-input">Pins</label><br>
      <div class="columns-row-input-holder">
        <input type="number" id="pins-input" name="pins-input" min="2" max="400" style="width: calc(100% - 8px);"/>
      </div>
    </div>

    <div class="setting-row-holder">
      <button id="build-button">Build</button>
    </div>


    

    <div class="setting-row-holder">
      <label for="tearing-checkbox">Cloth tearing</label><br>
      <div class="setting-row-input-holder">
        <input type="checkbox" id="tearing-checkbox" name="tearing-checkbox" value="false" checked>
      </div>
    </div>
    <!--
    -->
    <div class="setting-row-holder">
      <label for="tearing-checkbox">Tear threshold</label><br>
      <div class="setting-row-input-holder"> 
        <input type="number" id="tearing-input" name="tearing-input" min="0" max="500" style="width: calc(100% - 8px);" value="10"/>
      </div>
    </div>


  </div>
  
  <div id="cloth-sim-holder">

  </div>
</body>
</html>

================
File: package.json
================
{
  "dependencies": {
    "@lancercomet/fps-counter": "^1.0.0",
    "pixi.js": "^8.3.4",
    "stats.js": "^0.17.0"
  }
}
